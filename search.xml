<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/19/hello-world/"/>
      <url>/2022/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 35. 复杂链表的复制</title>
      <link href="/2022/05/06/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/05/06/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-35-复杂链表的复制"><a href="#剑指-Offer-35-复杂链表的复制" class="headerlink" title="剑指 Offer 35. 复杂链表的复制"></a><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">剑指 Offer 35. 复杂链表的复制</a></h4><ul><li><a href="#%E7%A4%BA%E4%BE%8B1">示例1:</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E5%BF%B5">碎碎念</a></li><li><a href="#%E8%A7%A3%E6%9E%90">解析</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E6%83%B3">碎碎想</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%80%92%E5%BD%92">如何递归</a><ul><li><a href="#%E8%AE%BE%E8%AE%A1%E9%80%92%E5%BD%92-%E8%BF%99%E4%B8%AA%E9%80%92%E5%BD%92%E9%9C%80%E8%A6%81%E5%B9%B2%E4%BB%80%E4%B9%88%E4%BA%8B">设计递归-这个递归需要干什么事？</a></li><li><a href="#%E7%BB%88%E6%AD%A2%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88">终止条件是什么</a></li><li><a href="#%E6%88%91%E7%9A%84%E6%AD%A6%E5%99%A8%E5%9C%A8%E5%93%AA%E9%87%8C">我的武器在哪里？</a></li><li><a href="#%E5%85%B7%E4%BD%93">具体？</a></li></ul></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E4%B8%8D%E5%A6%A8%E5%86%8D%E5%A4%A7%E8%83%86%E4%B8%80%E4%BA%9B">不妨再大胆一些？</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E8%AF%9D">碎碎话</a></li></ul><blockquote><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p></blockquote><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/01/09/e1.png" alt="e1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure><p>篇幅有限，这里只给出一个示例。</p><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>现在时间是2022年的5月6号，在此年的3月28号我写过了这题。但今天看到这题我又忘记该怎么写了，说到底还是学得不够透。所以借着这个机会深度总结一下。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>如果不知道题目的意思。我应该可以进一步解释，我明白，链表的指向（这里指<code>next</code>、<code>random</code>）都是指针，也就是一个对象的引用，所以，我不可以简单的进行一个赋值操作，因为对于一个引用，赋值仅仅是传递了一个内存地址，用试图用原先的指针赋值给一个新指针，那么此时新指针指向的依然还是原对象，也就是说，这样的拷贝操作是毫无作用的。</p><blockquote><p>所以，简单来说，题目需要我复刻它给出的指针，它需要一个值与原链表相同，但是内存地址与原链表完全不同的链表结构，也就是进行一次链表的深拷贝。</p></blockquote><p>看到这题，我的第一反映就是递归。这个应该很容易联想。以<code>示例1</code>为例，如果我需要复刻结点7那么我们就需要复刻7指向的<code>next</code>和<code>random</code>，同理，如果要复刻7的<code>next</code>，那么就需要复刻7的<code>next</code>的<code>next</code>，7的<code>next</code>的<code>random</code>…很显然，发现了这就是个套娃，所以这就很适合递归，nice。可是，我该怎么递归，我在这里迷失了。</p><h3 id="碎碎想"><a href="#碎碎想" class="headerlink" title="碎碎想"></a>碎碎想</h3><p>其实，我可以把这题的链表想象成是一个颗二叉树。<code>next</code>、<code>random</code>就看作是其的左右结点。</p><p>因为，做了这么多题，看了这么多的题解与指南，我已知道，在图论中，图结构本身其实也是树结构，它只不过是一颗N叉树。所以代入此题，我不用在意这个<code>random</code>随机指向，它的随机完全没有问题，是合理的。所以，我应该怎么递归呢。</p><h3 id="如何递归"><a href="#如何递归" class="headerlink" title="如何递归"></a>如何递归</h3><h4 id="设计递归-这个递归需要干什么事？"><a href="#设计递归-这个递归需要干什么事？" class="headerlink" title="设计递归-这个递归需要干什么事？"></a>设计递归-这个递归需要干什么事？</h4><p>我希望当我传入一个链表结点后，它能够将链表进行一次深拷贝，并将深拷贝后的新结点返回给我。</p><p>举个例子，假设有单链表<code>7-&gt;13-&gt;11-&gt;null</code>，如图</p><p><img src="/./../images/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6-1.png" alt="DFC2850DF3C5D15432E9CF490884CAE9"></p><h4 id="终止条件是什么"><a href="#终止条件是什么" class="headerlink" title="终止条件是什么"></a>终止条件是什么</h4><p>首先，提到递归，我应该本能的想到需要有一个<code>base case</code>，也就是需要有一个终止递归的条件，告诉它，这条路已经走到头了，不要无休止的陷入递归。<code>stackoverflow警告⚠️</code></p><p>那么这个<code>base case</code>是什么呢？这个也很容易想到，当传入的链表结点为<code>null</code>时，这条分支路径就递归到头了，那么我们返回的也应该是<code>null</code> *(在C&#x2F;C++中为<code>nullptr</code> or <code>NULL</code>)*，这个应该很好理解。</p><h4 id="我的武器在哪里？"><a href="#我的武器在哪里？" class="headerlink" title="我的武器在哪里？"></a>我的武器在哪里？</h4><p>那么之后我还要做什么，对于每一次深拷贝后的结点，我需要有个东西对它进行储存，否则我无法拿到<code>random</code>指向的深拷贝（如果在此之前我拷贝过相同结点的话）。</p><p><strong>所以，我需要有这样的结构，给予一个原先的结点，它能够得到对它进行深拷贝后的结点（如果深拷贝结点已经存在的情况话）</strong></p><p>显然，哈希表对这样的一一映射关系的存储效率得天独厚。</p><p>所以，我需要有一个<code>unordered_map&lt;Node*, Node*&gt; map</code>，我需要用它来干这件大事。</p><h4 id="具体？"><a href="#具体？" class="headerlink" title="具体？"></a>具体？</h4><p>当哈希表发现中如果已经存在原结点的新结点，我只需要返回这个新结点就可以了。</p><p>如果没有发现呢？那么我就需要<code>Node* node = new Node(val)</code>，这个<code>val</code>是原结点的<code>head-&gt;val</code>，<code>node</code>就是我们的新结点。那，新结点的<code>next</code>、<code>random</code>呢？我只需要将原结点的<code>next</code>、<code>random</code>传入我们设计这个递归函数中，其它的，全权不需要我操心了。之后返回这个结点就算完成了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; map;</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">count</span>(head)) <span class="keyword">return</span> map[head];</span><br><span class="line">        Node* node = <span class="keyword">new</span> <span class="built_in">Node</span>(head-&gt;val);</span><br><span class="line">        map[head] = node;</span><br><span class="line">        node-&gt;next = <span class="built_in">copyRandomList</span>(head-&gt;next);</span><br><span class="line">        node-&gt;random = <span class="built_in">copyRandomList</span>(head-&gt;random);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可能有些疑问，为什么是先<code>map[head] = node;</code>之后再赋值<code>node</code>的<code>next</code>与<code>random</code>呢？</p><p>先想想如果按照先赋值全部以后再将其添加的哈希表中会发生什么，答案是<code>stackoverflow</code>，无限递归了，这是为什么呢？如果脑中浅浅的执行一下你会发现，一旦遇上循环指针，我们也许在<code>map</code>中永远找不到<code>node</code>了，终止条件覆盖不到这种情况，它会一直递归下去的。</p><p><em>那为什么按代码里的顺序就可以呢？它怎么解决上述的问题？</em></p><p>原因是我们<code>Node* node = new Node(head-&gt;val);</code>在生成新结点后就进行了<code>map[head] = node;</code>将新结点存储到哈希表的操作。之后再针对原指针的<code>next</code>、<code>random</code>进行递归，即便遇上循环指针，它也会触发<code>if (map.count(head)) return map[head];</code>返回了我们创建的新结点，也就终止了递归操作。</p><p>而当新的结点返回，我们就可以顺利将<code>node-&gt;next</code>和<code>node-&gt;random</code>进行赋值操作了。</p><p>最终，所有递归调用栈弹出，返回的自然是最初的<code>node</code>，恰到好处。</p><h3 id="不妨再大胆一些？"><a href="#不妨再大胆一些？" class="headerlink" title="不妨再大胆一些？"></a>不妨再大胆一些？</h3><p>其实，对于初入编程的学习者来说，递归其实是一个比较难懂的概念，知其然却不知其所以然，至少对于我来说是这样的。这样的情况持续了相当长一段时间，一入递归深似海，从此offer为路人。其实对于递归这个概念，我并没有什么特别的好的技巧，但是经过很长一段时间的刷题思考，或是知觉使然，也逐渐有了一些经验。</p><p>经验告诉我，在学习递归时，很容易陷入递归的调用栈中挣扎，这太正常了，我们的脑袋可压不了几个调用栈。所幸，它应该总可以描述成我们可以翻译的树形结构，我们都知道程序代码是顺序执行的，所以完全可以拿起手中的草稿纸对这个调用顺序一探究竟，倒要看看它凭什么就能如此简约的解决这样的问题，但写这样的执行顺序是一定不要忘记使用缩进或其它辨别方式来表示递归的分支，否则，草稿纸一样无法拯救一个试图变强的灵魂。</p><h3 id="碎碎话"><a href="#碎碎话" class="headerlink" title="碎碎话"></a>碎碎话</h3><blockquote><p>你这一生，一定要吃够足够的苦头，才能够明白幸运一时的运气拯救不了一个学识匮乏的人生。</p></blockquote><p><em>2022年5月6日于三院图书馆</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 丢失在记忆中的算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
