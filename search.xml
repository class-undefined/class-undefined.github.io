<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/19/hello-world/"/>
      <url>/2022/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- II. 青蛙跳台阶问题</title>
      <link href="/2022/05/15/%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6II/"/>
      <url>/2022/05/15/%E9%9D%92%E8%9B%99%E8%B7%B3%E5%8F%B0%E9%98%B6II/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a><a href="https://leetcode.cn/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></h4><ul><li><a href="#%E7%A2%8E%E7%A2%8E%E5%BF%B5">碎碎念</a></li><li><a href="#%E8%A7%A3%E6%9E%90">解析</a></li><li><a href="#%E5%A6%82%E4%BD%95%E8%A7%84%E5%88%92">如何规划？</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E6%9D%82%E8%B0%88">杂谈</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E8%AF%9D">碎碎话</a><blockquote><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 <code>n</code> 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p></blockquote></li></ul><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 7</span><br><span class="line">输出：21</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= n &lt;= 100</span><br></pre></td></tr></table></figure><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天是2022年的5月14日， 周六</p><p>最近总觉得自己学习的效率不太高，一直在寻找一种比较适合自己的方式。一直以来我都懒于做时间规划，这也导致我做事经常不能够集中。所以也尝试每天列一些Todo清单，完成以后就把它✅掉，于是在做一天事下来后发现，原来自己每天完成的东西还是挺多的。（成就感油然而生！）</p><p>倒霉的是可能最近跑步过余猛烈，右脚现在生疼，不便走路。于是约好今天去划船。（好像并没有因果关系，不过来三亚三年，也没有真正玩过这边的水。这座城市承载了我三年记忆，而我却从未感受到它多少的存在，我见的最多的是屏幕上的字符，它的山水烟火，很遗憾没能使我驻足，并不需要依靠什么自制力，单单朴素的钱包就足够抵御这样的吸引… 如今不久就要离开这座城市，而日后朋友们也都相继离开，他们走后，我大抵不会有多大机会再回到这片承载了我三年记忆的城市了。）</p><p>所以趁这不太久的时间，尽量体会一下这片风土人情吧。</p><p>感慨就说到这里，白天还是继续学习吧，我来聊聊困惑我长久的动态规划。（事实上就在写了这篇文章时，我仍然对着块没有多大的顿悟，仅有一些经验）</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>这是一道经典的动态规划题目。经典到没有解析。X</p><p>首先，如何想到使用动态规划？（当然我在没练动态规划之前肯定是想不到这个的）</p><p>动态规划最首要的特征是，当前的状态是可以通过之前的状态推算的，是逐级递推的。所以，如果有题目能够满足这样的条件，那么它大抵是能够使用动态规划的思路去解决。</p><p>在这题中，青蛙可以一次可以跳上1级台阶，也可以一次跳上2级台阶。</p><p>那么则有：</p><table><thead><tr><th>n</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>ans</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td></tr></tbody></table><p>看着有点像斐波那契数列对吧，事实上确实是。</p><p>那么为什么会这样，我们来捋一捋，看看能不能发现什么规律。</p><p>n&#x3D;1</p><ul><li><p>只需要跳一个台阶。次数为1</p><p>总次数为1</p></li></ul><p>n&#x3D;2</p><ul><li><p>一次跳2个台阶，次数为1</p></li><li><p>在n为1的基础上再跳1个台阶，n为1的次数为1，所以该次数也为1</p><p>所以总次数为2</p></li></ul><p>n&#x3D;3</p><ul><li><p>在n为1的基础上跳2个台阶，n为1的次数为1，所以该次数也为1</p></li><li><p>在n为2的基础上跳1个台阶，然而n为2有两种情况，所以该次数为2</p><p>所以总次数为3</p></li></ul><p>n&#x3D;4</p><p>​由于青蛙一次最多只能跳2个台阶，这意味着n&#x3D;4时，它的落脚前最近的位置是在n&#x3D;2，（n&#x3D;1时青蛙最多只能到达3）这个应该能够理解，未来忘记了思路的自己，再看到这道题，有没有恍然大悟的感觉（我会庆幸此时写下文章的自己）。</p><ul><li><p>在n为2的基础上跳2个台阶，n为2的次数为2，所以该次数也为2</p></li><li><p>在n为3的基础上跳1个台阶，然而n为3有3种情况，所以该次数为3</p><p>所以总次数为5</p></li></ul><p>n&#x3D;5</p><p>n&#x3D;6</p><p>…</p><p>如此。是否会有点感觉呢。</p><p>注意一点，这种句式可能会使我的解释给人造成误导，即</p><blockquote><p>在<code>n</code>为<code>x</code>的基础上跳<code>x</code>个台阶，<code>n</code>为<code>x</code>的次数为<code>k</code>，所以该次数也为<code>k</code></p></blockquote><p>你可能会疑惑为什么也是<code>k</code>，而不是<code>k + 1</code>呢，因为我初学动态规划也会有这样的疑问，并且在最近我才想到合理的解释，也许是悟性不够吧。</p><p>所以这个疑问的答案是什么呢？</p><p>我的回答是，向来如此。是的，它本应该就是这样的。（废话）</p><p>因为，当<code>n = 4</code>时，若此时🐸在第2级台阶，它要达到4，那么它必须跳2级，这个数列的可能性在给出<code>n</code>时，就已经确定了。</p><p>举例，</p><p>先给出<code>n = 2</code>，<code>n = 3</code>的可能性，这里<code>step</code>代表其跳到指定台阶的不同步数方案。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">2</span></span><br><span class="line">step = [[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">n = <span class="number">3</span></span><br><span class="line">step = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">1</span>]]</span><br></pre></td></tr></table></figure><p>那么<code>n = 4</code>则有（用我在上方列举的情况做对比）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">4</span> </span><br><span class="line">step_by_2 = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>]] <span class="comment"># 在 n = 2的基础上有</span></span><br><span class="line">step_by_3 = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]] <span class="comment"># 在 n = 3的基础上有</span></span><br><span class="line">step = [[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>]] <span class="comment"># 两者合并即所有情况</span></span><br></pre></td></tr></table></figure><p>所以，也就不存在+1一说，因为若要到达<code>n</code>级台阶，那么它本就是这样发展的。若在2级台阶时，<code>step = [1, 1]</code>那么下一步就必然是2，<code>step = [1, 1, 2]</code>，它是一个整体，逻辑上与2级台阶的<code>step = [1, 1]</code>等同，仅仅是<code>step</code>数列长度不一样，这个长度不一样是其台阶级数决定的，仅此而已。若+1，就没有意义了。（如果还是不能理解我说的意思，需要自己去悟了，我无法用更好的语言表达了，为此我深感抱歉）</p><h3 id="如何规划？"><a href="#如何规划？" class="headerlink" title="如何规划？"></a>如何规划？</h3><p>由上部分的解析我们已经可以知道，当前台阶的步数仅与前两次台阶计数的步数有关。</p><p>约定一个长度为<code>n</code>的数组<code>dp</code>，规定<code>dp[i]</code>为青蛙跳到第<code>i</code>级台阶的跳法。由于以上的分析我们不难知道，当前台阶的跳法为前两个的台阶的跳法之和。</p><p>即<code>dp[i] = dp[i - 1] + dp[i - 2]</code>，这就是本题动态规划的状态转移方程，没错，就是斐波那契的表达式。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numWays</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span>* dp = <span class="keyword">new</span> <span class="type">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mod = <span class="number">1000000007</span>; <span class="comment">// 题目要求取模，否则n过大则答案会溢出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = (dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]) % mod; <span class="comment">// 状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n]; <span class="comment">// 递推到n即为答案</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><p>今天去体验了一番游艇，还下潜游了一会。想着以后这座城市的日子已进入倒计时，第一次踏入这片土地的场景仍印在脑海，心中仍然有些唏嘘。我总是这样的怀旧，曾经的日子距离今天越久，仿佛那些日子相比于今天就越快乐。这不好。</p><p>Anyway，今天也很快乐。</p><h3 id="碎碎话"><a href="#碎碎话" class="headerlink" title="碎碎话"></a>碎碎话</h3><blockquote><p>无知的少年依旧无知，追寻的人生依旧还在路上。</p></blockquote><p>2022年5月14日 星期六 江南四大才子出海顺利归来 于寝室。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 强化训练 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 力扣那些事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>433. 最小基因变化</title>
      <link href="/2022/05/14/%E6%9C%80%E5%B0%8F%E5%9F%BA%E5%9B%A0%E5%8F%98%E5%8C%96/"/>
      <url>/2022/05/14/%E6%9C%80%E5%B0%8F%E5%9F%BA%E5%9B%A0%E5%8F%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="433-最小基因变化"><a href="#433-最小基因变化" class="headerlink" title="433. 最小基因变化"></a><a href="https://leetcode.cn/problems/minimum-genetic-mutation/">433. 最小基因变化</a></h4><ul><li><a href="#%E7%A4%BA%E4%BE%8B1">示例1:</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E5%BF%B5">碎碎念</a></li><li><a href="#%E8%A7%A3%E6%9E%90">解析</a></li><li><a href="#%E5%A6%82%E4%BD%95%E4%B8%8B%E6%89%8B">如何下手？</a></li><li><a href="#%E6%88%91%E7%9A%84%E6%AD%A6%E5%99%A8%E5%9C%A8%E9%82%A3%E9%87%8C">我的武器在那里？</a></li><li><a href="#%E5%85%B7%E4%BD%93">具体？</a></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E6%9D%82%E8%B0%88">杂谈</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E8%AF%9D">碎碎话</a><blockquote><p>基因序列可以表示为一条由 8 个字符组成的字符串，其中每个字符都是<code> &#39;A&#39;</code>、<code>&#39;C&#39;</code>、<code>&#39;G&#39;</code> 和 <code>&#39;T&#39;</code> 之一。</p><p>假设我们需要调查从基因序列 <code>start </code>变为 <code>end</code> 所发生的基因变化。一次基因变化就意味着这个基因序列中的一个字符发生了变化。</p><p>例如，<code>&quot;AACCGGTT&quot; --&gt; &quot;AACCGGTA&quot; </code>就是一次基因变化。<br>另有一个基因库<code>bank</code>记录了所有有效的基因变化，只有基因库中的基因才是有效的基因序列。</p><p>给你两个基因序列 <code>start</code> 和<code>end</code>，以及一个基因库<code> bank</code> ，请你找出并返回能够使<code>start</code>变化为 <code>end</code> 所需的最少变化次数。如果无法完成此基因变化，返回<code> -1</code> 。</p><p>注意：起始基因序列 <code>start </code>默认是有效的，但是它并不一定会出现在基因库中。</p></blockquote></li></ul><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：start = &quot;AACCGGTT&quot;, end = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>篇幅有限，这里只给出一个示例。</p><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>今天是2022年的5月7日，在此日的0点，看过了这题，是当日的每日一题，粗略的看了一眼题目，思来想去，横竖无头绪，只在字里行间看到两个字，回溯。思考了一会，发现不止如何下手。遂看题解，由于当时已无心学习，在电子书与力扣反复切换，作罢。这个懒狗居然将疑问抛给早晨后的自己…怎么睡得着的（一大早就被空调冻醒）。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>题目的大意是，给定一个初始基因序列<code>start</code>，在符合特定条件的前提下，每次可用修改<code>start</code>的其中的一个字符，直到<code>start</code>与<code>end</code>相等，求最少的更改次数。</p><p>特定条件为：</p><ul><li><p>更改的字符必须是<code> &#39;A&#39;</code>、<code>&#39;C&#39;</code>、<code>&#39;G&#39;</code> 和 <code>&#39;T&#39;</code> 之一。</p></li><li><p>每一次更改字符后形成的字符串必须存在于<code>bank</code>数组当中。</p><p>举个例子：若<code> start = &quot;AACCGGTT&quot;</code>, <code>end = &quot;AACCGGCA&quot;</code>, <code>bank = [&quot;AACCGGCA&quot;, &quot;AACCGGTA&quot;]</code>，在这个例子当中，修改<code>start</code>字符串并不是<code> &#39;A&#39;</code>、<code>&#39;C&#39;</code>、<code>&#39;G&#39;</code> 、 <code>&#39;T&#39;</code>中任意一个替换都可以的。我将修改之后的字符串命名为<code>next</code>。那么<code>next</code>必须是<code>bank</code>中的元素。</p><p>也就是说，在这个例子下，改法步骤有且仅有两种。</p><p>第一步，<code>start = &quot;AACCGGTT&quot;</code> -&gt; <code>next = &quot;AACCGGTA&quot;</code>，而不能 <code>start = &quot;AACCGGTT&quot;</code> -&gt; <code>next = &quot;AACCGGTC&quot;</code> or <code>next = &quot;AACCGGTG&quot;</code>等等，因为<code>&quot;AACCGGTC&quot;</code>与<code>&quot;AACCGGTG&quot;</code>并不是<code>bank</code>中的元素。</p><p>同理，第二步就只能是<code>&quot;AACCGGTA&quot;</code> -&gt; <code>&quot;AACCGGCA&quot;</code>。</p><p>最终修改次数，即为<code>2</code>。</p><p>说到这里，应该大致明了题目意思了。</p></li></ul><p>所以，我应该怎么做？未看题解之前，我完全没有想到，这其实是一个图论问题，抽象出来其实是在求图的最小路径长度。</p><h3 id="如何下手？"><a href="#如何下手？" class="headerlink" title="如何下手？"></a>如何下手？</h3><p>图的遍历方式有dfs和bfs，这两种都可以解决这个问题，但显然bfs会比较清晰明了。我可用把<code>start</code>与修改的每一个<code>next</code>抽象成一颗N叉树。</p><p>举个例子：</p><p>若例子为<code>start = &quot;AAAAACCC&quot;, end = &quot;AACCCCCC&quot;, bank = [&quot;AAAACCCC&quot;,&quot;AAACCCCC&quot;,&quot;AACCCCCC&quot;, &quot;AAAATCCC&quot;]</code></p><p>那么其结构就是这样：</p><p><img src="/./Xnip2022-05-07_11-04-52.png" alt="Xnip2022-05-07_11-04-52"></p><p>显然，最小变化次数为<code>3</code>次。</p><p>那么利用bfs，我就可用逐层的遍历可能的修改，这样，一旦某一层符合条件的修改字符串等于<code>end</code>，自然而然就找到了最小的修改次数（因为在此之前绝无等于<code>end</code>的情况，我总是逐层遍历的），也就是这颗N叉数的层数。仔细想想，应该没有问题。</p><h3 id="我的武器在那里？"><a href="#我的武器在那里？" class="headerlink" title="我的武器在那里？"></a>我的武器在那里？</h3><p>首先，若需要快速的知道修改的字符串是否存在与<code>bank</code>中，显然需要一个哈希表。</p><p>以及，需要判断修改的字符串是否以及遍历过了，需要有一个<code>visited</code>记录，同样也用哈希表存储。</p><p>当然，也要有用于枚举修改可能性的<code>char cells[4] = &#123;&#39;A&#39;, &#39;C&#39;, &#39;G&#39;, &#39;T&#39;&#125;;</code></p><p>最后，bfs必备的队列。</p><h3 id="具体？"><a href="#具体？" class="headerlink" title="具体？"></a>具体？</h3><p>依据题目意思，当初始情况下<code>start</code>若与<code>end</code>相等，则无需做任何处理。直接<code>return 0;</code></p><p>否则，我们需要建立一个哈希表来方便查询字符串是否存在于<code>bank</code>，以及需要维护一个<code>visited</code>记录是否访问过修改的元素。</p><p>如果end不存在于bank，那么代表着修改的结果不可能会end相等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unordered_set&lt;string&gt; cnt; <span class="comment">// 用于查询元素是否存在于bank</span></span><br><span class="line">unordered_set&lt;string&gt; visited; <span class="comment">// 记录是否访问过修改的元素。</span></span><br><span class="line"><span class="type">char</span> cells[<span class="number">4</span>] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;T&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : bank) cnt.<span class="built_in">insert</span>(s); <span class="comment">// 将bank中的元素添加到cnt中</span></span><br><span class="line"><span class="keyword">if</span> (cnt.<span class="built_in">count</span>(end) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 如果end不存在于bank，那么代表着修改的结果不可能会end相等。</span></span><br></pre></td></tr></table></figure><p>之后，就是进行bfs搜索，一旦遇到修改字符串与<code>end</code>相等的情况，那么就输出当前的层数，否则，当bfs搜索完毕依然未找到结果，则代表<code>bank</code>所给出的路径无法到达<code>end</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMutation</span><span class="params">(string start, string end, vector&lt;string&gt;&amp; bank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        unordered_set&lt;string&gt; cnt; <span class="comment">// 用于查询元素是否存在于bank</span></span><br><span class="line">        unordered_set&lt;string&gt; visited; <span class="comment">// 记录是否访问过修改的元素。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : bank) cnt.<span class="built_in">insert</span>(s); <span class="comment">// 将bank中的元素添加到cnt中</span></span><br><span class="line">        <span class="keyword">if</span> (cnt.<span class="built_in">count</span>(end) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 如果end不存在于bank，那么代表着修改的结果不可能会end相等。</span></span><br><span class="line">        queue&lt;string&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(start);</span><br><span class="line">        visited.<span class="built_in">insert</span>(start);</span><br><span class="line">        <span class="type">char</span> cells[<span class="number">4</span>] = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;T&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> step = <span class="number">1</span>; <span class="comment">// 记录bfs搜索层数</span></span><br><span class="line">        <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; size; k++) &#123;</span><br><span class="line">                string node = q.<span class="built_in">front</span>();</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (node[i] == cells[j]) <span class="keyword">continue</span>;</span><br><span class="line">                        string next = node;</span><br><span class="line">                        next[i] = cells[j];</span><br><span class="line">                        <span class="keyword">if</span> (cnt.<span class="built_in">count</span>(next) &amp;&amp; !visited.<span class="built_in">count</span>(next)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (next == end) <span class="keyword">return</span> step;</span><br><span class="line">                            visited.<span class="built_in">insert</span>(next);</span><br><span class="line">                            q.<span class="built_in">push</span>(next);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h3><p>截止到2022年5月7日，如今力扣也刷过了374道。可能说出这样的成绩，也会有人觉得我是一个很算法还不错的人。我也希望，但事实并不如此。在多的数量胜不了质量的稳健，也许简单难度我可以立马想到并且写出，稍微变化一下的中等题目也许我也会踌躇良久，面对周赛，甚至也只能AC过一个签到题。</p><p>我并不抱怨，事实上如今的成绩也会让我很欣慰，毕竟在一年之前，我甚至通不过它的简单水平。很奇妙，当初拍脑袋就去做的事情转眼就坚持了将近一年，这让我看到了无限可能，虽然水平尚不突出，但是我的目的已经达到了，面对算法，我已不再恐惧。</p><p>我不试图在一个短时间内取得怎样成绩，如果想改变一些东西，不妨将这件事细分到每天的一件小事。没有多少人做得到坚持一件对自己来说十分厌恶的事情，如果决心要坚持它，不妨先学会热爱，没有热爱的坚持，是在折磨自己。细水长流，源远流长，我对一步登天不抱有幻想，无心插柳才是最适合的方式。</p><p>这一年学会了很多东西，对于明天，要一直抱有期待。（当兴趣变成了工作，也可以说是相当痛苦的事情）</p><p>anyway，感谢Github，让我实现了创作自由~</p><h3 id="碎碎话"><a href="#碎碎话" class="headerlink" title="碎碎话"></a>碎碎话</h3><blockquote><p>对于我身上那些奇怪的光环，它并不属于我。我本林中之鸟，需要时刻保持谦卑。</p></blockquote><p><em>2022年5月7日于三院图书馆 欲去北一吃午饭，正小雨，无伞，待雨停</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 比昨天变强一点点 </tag>
            
            <tag> 力扣那些事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 35. 复杂链表的复制</title>
      <link href="/2022/05/06/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/05/06/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-35-复杂链表的复制"><a href="#剑指-Offer-35-复杂链表的复制" class="headerlink" title="剑指 Offer 35. 复杂链表的复制"></a><a href="https://leetcode.cn/problems/fu-za-lian-biao-de-fu-zhi-lcof/">剑指 Offer 35. 复杂链表的复制</a></h4><ul><li><a href="#%E7%A4%BA%E4%BE%8B1">示例1:</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E5%BF%B5">碎碎念</a></li><li><a href="#%E8%A7%A3%E6%9E%90">解析</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E6%83%B3">碎碎想</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%80%92%E5%BD%92">如何递归</a><ul><li><a href="#%E8%AE%BE%E8%AE%A1%E9%80%92%E5%BD%92-%E8%BF%99%E4%B8%AA%E9%80%92%E5%BD%92%E9%9C%80%E8%A6%81%E5%B9%B2%E4%BB%80%E4%B9%88%E4%BA%8B">设计递归-这个递归需要干什么事？</a></li><li><a href="#%E7%BB%88%E6%AD%A2%E6%9D%A1%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88">终止条件是什么</a></li><li><a href="#%E6%88%91%E7%9A%84%E6%AD%A6%E5%99%A8%E5%9C%A8%E5%93%AA%E9%87%8C">我的武器在哪里？</a></li><li><a href="#%E5%85%B7%E4%BD%93">具体？</a></li></ul></li><li><a href="#%E4%BB%A3%E7%A0%81">代码</a></li><li><a href="#%E4%B8%8D%E5%A6%A8%E5%86%8D%E5%A4%A7%E8%83%86%E4%B8%80%E4%BA%9B">不妨再大胆一些？</a></li><li><a href="#%E7%A2%8E%E7%A2%8E%E8%AF%9D">碎碎话</a></li></ul><blockquote><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p></blockquote><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1:"></a>示例1:</h3><p><img src="/./../images/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6-e1.png" alt="e1"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure><p>篇幅有限，这里只给出一个示例。</p><h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>现在时间是2022年的5月6号，在此年的3月28号我写过了这题。但今天看到这题我又忘记该怎么写了，说到底还是学得不够透。所以借着这个机会深度总结一下。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>如果不知道题目的意思。我应该可以进一步解释，我明白，链表的指向（这里指<code>next</code>、<code>random</code>）都是指针，也就是一个对象的引用，所以，我不可以简单的进行一个赋值操作，因为对于一个引用，赋值仅仅是传递了一个内存地址，用试图用原先的指针赋值给一个新指针，那么此时新指针指向的依然还是原对象，也就是说，这样的拷贝操作是毫无作用的。</p><blockquote><p>所以，简单来说，题目需要我复刻它给出的指针，它需要一个值与原链表相同，但是内存地址与原链表完全不同的链表结构，也就是进行一次链表的深拷贝。</p></blockquote><p>看到这题，我的第一反映就是递归。这个应该很容易联想。以<code>示例1</code>为例，如果我需要复刻结点7那么我们就需要复刻7指向的<code>next</code>和<code>random</code>，同理，如果要复刻7的<code>next</code>，那么就需要复刻7的<code>next</code>的<code>next</code>，7的<code>next</code>的<code>random</code>…很显然，发现了这就是个套娃，所以这就很适合递归，nice。可是，我该怎么递归，我在这里迷失了。</p><h3 id="碎碎想"><a href="#碎碎想" class="headerlink" title="碎碎想"></a>碎碎想</h3><p>其实，我可以把这题的链表想象成是一个颗二叉树。<code>next</code>、<code>random</code>就看作是其的左右结点。</p><p>因为，做了这么多题，看了这么多的题解与指南，我已知道，在图论中，图结构本身其实也是树结构，它只不过是一颗N叉树。所以代入此题，我不用在意这个<code>random</code>随机指向，它的随机完全没有问题，是合理的。所以，我应该怎么递归呢。</p><h3 id="如何递归"><a href="#如何递归" class="headerlink" title="如何递归"></a>如何递归</h3><h4 id="设计递归-这个递归需要干什么事？"><a href="#设计递归-这个递归需要干什么事？" class="headerlink" title="设计递归-这个递归需要干什么事？"></a>设计递归-这个递归需要干什么事？</h4><p>我希望当我传入一个链表结点后，它能够将链表进行一次深拷贝，并将深拷贝后的新结点返回给我。</p><p>举个例子，假设有单链表<code>7-&gt;13-&gt;11-&gt;null</code>，如图</p><p><img src="/./../images/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6-1.png" alt="DFC2850DF3C5D15432E9CF490884CAE9"></p><h4 id="终止条件是什么"><a href="#终止条件是什么" class="headerlink" title="终止条件是什么"></a>终止条件是什么</h4><p>首先，提到递归，我应该本能的想到需要有一个<code>base case</code>，也就是需要有一个终止递归的条件，告诉它，这条路已经走到头了，不要无休止的陷入递归。<code>stackoverflow警告⚠️</code></p><p>那么这个<code>base case</code>是什么呢？这个也很容易想到，当传入的链表结点为<code>null</code>时，这条分支路径就递归到头了，那么我们返回的也应该是<code>null</code> *(在C&#x2F;C++中为<code>nullptr</code> or <code>NULL</code>)*，这个应该很好理解。</p><h4 id="我的武器在哪里？"><a href="#我的武器在哪里？" class="headerlink" title="我的武器在哪里？"></a>我的武器在哪里？</h4><p>那么之后我还要做什么，对于每一次深拷贝后的结点，我需要有个东西对它进行储存，否则我无法拿到<code>random</code>指向的深拷贝（如果在此之前我拷贝过相同结点的话）。</p><p><strong>所以，我需要有这样的结构，给予一个原先的结点，它能够得到对它进行深拷贝后的结点（如果深拷贝结点已经存在的情况话）</strong></p><p>显然，哈希表对这样的一一映射关系的存储效率得天独厚。</p><p>所以，我需要有一个<code>unordered_map&lt;Node*, Node*&gt; map</code>，我需要用它来干这件大事。</p><h4 id="具体？"><a href="#具体？" class="headerlink" title="具体？"></a>具体？</h4><p>当哈希表发现中如果已经存在原结点的新结点，我只需要返回这个新结点就可以了。</p><p>如果没有发现呢？那么我就需要<code>Node* node = new Node(val)</code>，这个<code>val</code>是原结点的<code>head-&gt;val</code>，<code>node</code>就是我们的新结点。那，新结点的<code>next</code>、<code>random</code>呢？我只需要将原结点的<code>next</code>、<code>random</code>传入我们设计这个递归函数中，其它的，全权不需要我操心了。之后返回这个结点就算完成了。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;Node*, Node*&gt; map;</span><br><span class="line">    <span class="function">Node* <span class="title">copyRandomList</span><span class="params">(Node* head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!head) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="built_in">count</span>(head)) <span class="keyword">return</span> map[head];</span><br><span class="line">        Node* node = <span class="keyword">new</span> <span class="built_in">Node</span>(head-&gt;val);</span><br><span class="line">        map[head] = node;</span><br><span class="line">        node-&gt;next = <span class="built_in">copyRandomList</span>(head-&gt;next);</span><br><span class="line">        node-&gt;random = <span class="built_in">copyRandomList</span>(head-&gt;random);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可能有些疑问，为什么是先<code>map[head] = node;</code>之后再赋值<code>node</code>的<code>next</code>与<code>random</code>呢？</p><p>先想想如果按照先赋值全部以后再将其添加的哈希表中会发生什么，答案是<code>stackoverflow</code>，无限递归了，这是为什么呢？如果脑中浅浅的执行一下你会发现，一旦遇上循环指针，我们也许在<code>map</code>中永远找不到<code>node</code>了，终止条件覆盖不到这种情况，它会一直递归下去的。</p><p><em>那为什么按代码里的顺序就可以呢？它怎么解决上述的问题？</em></p><p>原因是我们<code>Node* node = new Node(head-&gt;val);</code>在生成新结点后就进行了<code>map[head] = node;</code>将新结点存储到哈希表的操作。之后再针对原指针的<code>next</code>、<code>random</code>进行递归，即便遇上循环指针，它也会触发<code>if (map.count(head)) return map[head];</code>返回了我们创建的新结点，也就终止了递归操作。</p><p>而当新的结点返回，我们就可以顺利将<code>node-&gt;next</code>和<code>node-&gt;random</code>进行赋值操作了。</p><p>最终，所有递归调用栈弹出，返回的自然是最初的<code>node</code>，恰到好处。</p><h3 id="不妨再大胆一些？"><a href="#不妨再大胆一些？" class="headerlink" title="不妨再大胆一些？"></a>不妨再大胆一些？</h3><p>其实，对于初入编程的学习者来说，递归其实是一个比较难懂的概念，知其然却不知其所以然，至少对于我来说是这样的。这样的情况持续了相当长一段时间，一入递归深似海，从此offer为路人。其实对于递归这个概念，我并没有什么特别的好的技巧，但是经过很长一段时间的刷题思考，或是知觉使然，也逐渐有了一些经验。</p><p>经验告诉我，在学习递归时，很容易陷入递归的调用栈中挣扎，这太正常了，我们的脑袋可压不了几个调用栈。所幸，它应该总可以描述成我们可以翻译的树形结构，我们都知道程序代码是顺序执行的，所以完全可以拿起手中的草稿纸对这个调用顺序一探究竟，倒要看看它凭什么就能如此简约的解决这样的问题，但写这样的执行顺序是一定不要忘记使用缩进或其它辨别方式来表示递归的分支，否则，草稿纸一样无法拯救一个试图变强的灵魂。</p><h3 id="碎碎话"><a href="#碎碎话" class="headerlink" title="碎碎话"></a>碎碎话</h3><blockquote><p>你这一生，一定要吃够足够的苦头，才能够明白幸运一时的运气拯救不了一个学识匮乏的人生。</p></blockquote><p><em>2022年5月6日于三院图书馆</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> 丢失在记忆中的算法 </tag>
            
            <tag> 力扣那些事 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
